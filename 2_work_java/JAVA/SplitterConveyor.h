/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SplitterConveyor */

#ifndef _Included_SplitterConveyor
#define _Included_SplitterConveyor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SplitterConveyor
 * Method:    cylinder1GetPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder1GetPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getIdentificationSensors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getIdentificationSensors
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isBoxAtDock1
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isBoxAtDock1
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    initializeHardwarePorts
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_initializeHardwarePorts
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1Stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorMove
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorMove
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorStop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorStop
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
